name: Rollback deployment

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "rollback" to confirm'
        required: true
        type: string

permissions:
  contents: read

env:
  DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
  DATA_VOLUME_PATH: /mnt/volume_nyc3_01

jobs:
  rollback:
    runs-on: ubuntu-latest
    steps:
      - name: Validate confirmation
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "rollback" ]; then
            echo "ERROR: Confirmation failed. You must type 'rollback' to proceed."
            exit 1
          fi
          echo "Confirmation validated. Proceeding with rollback..."

      - uses: actions/checkout@v4

      - name: Encode rollback script
        run: |
          echo "ROLLBACK_SCRIPT=$(base64 -w 0 rollback.sh)" >> $GITHUB_ENV

      - name: Execute rollback on droplet
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: root
          key: ${{ secrets.DROPLET_SSH_KEY }}
          envs: DATA_VOLUME_PATH,ROLLBACK_SCRIPT
          script: |
            set -euo pipefail

            # Create log directory
            mkdir -p /var/log/schwarbot
            TIMESTAMP=$(date +%Y-%m-%d-%H%M%S)
            ROLLBACK_LOG="/var/log/schwarbot/rollback-${TIMESTAMP}.log"

            # Function to log and execute commands
            log_exec() {
              echo "$(date '+%Y-%m-%d %H:%M:%S') - $*" | tee -a "${ROLLBACK_LOG}"
              "$@" 2>&1 | tee -a "${ROLLBACK_LOG}"
              return ${PIPESTATUS[0]}
            }

            echo "$(date '+%Y-%m-%d %H:%M:%S') - Starting deployment rollback" | tee "${ROLLBACK_LOG}"
            echo "Rollback logs: ${ROLLBACK_LOG}" | tee -a "${ROLLBACK_LOG}"

            # Decode and create rollback script
            echo "$ROLLBACK_SCRIPT" | base64 -d > /tmp/rollback.sh
            chmod +x /tmp/rollback.sh

            # Execute rollback
            echo "$(date '+%Y-%m-%d %H:%M:%S') - Executing rollback script..." | tee -a "${ROLLBACK_LOG}"
            export DATA_VOLUME_PATH="${DATA_VOLUME_PATH}"

            if /tmp/rollback.sh 2>&1 | tee -a "${ROLLBACK_LOG}"; then
              echo "$(date '+%Y-%m-%d %H:%M:%S') - Rollback completed successfully!" | tee -a "${ROLLBACK_LOG}"
              echo "System restored to previous configuration" | tee -a "${ROLLBACK_LOG}"
            else
              echo "$(date '+%Y-%m-%d %H:%M:%S') - Rollback failed!" | tee -a "${ROLLBACK_LOG}" >&2
              exit 1
            fi

            # Show final container status
            echo "$(date '+%Y-%m-%d %H:%M:%S') - Current container status:" | tee -a "${ROLLBACK_LOG}"
            cd "${DATA_VOLUME_PATH}"
            docker compose ps 2>&1 | tee -a "${ROLLBACK_LOG}"

            # Capture container logs
            echo "$(date '+%Y-%m-%d %H:%M:%S') - Capturing container logs..." | tee -a "${ROLLBACK_LOG}"
            docker compose logs --tail 50 schwarbot 2>&1 | tee -a "${ROLLBACK_LOG}"
            docker compose logs --tail 50 alpacabot 2>&1 | tee -a "${ROLLBACK_LOG}"

            # Cleanup
            rm -f /tmp/rollback.sh

            echo "$(date '+%Y-%m-%d %H:%M:%S') - Rollback operation complete" | tee -a "${ROLLBACK_LOG}"
            echo "Rollback logs: ${ROLLBACK_LOG}"
