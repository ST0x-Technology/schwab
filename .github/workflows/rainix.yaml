name: Rainix CI
on: [push]

concurrency:
  group: ${{ github.ref }}-rainix
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}

jobs:
  rainix:
    strategy:
      matrix:
        os: [ubuntu-latest]
        task: [rainix-rs-test, rainix-rs-static]
      fail-fast: false
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: nixbuild/nix-quick-install-action@v30
        with:
          nix_conf: |
            keep-env-derivations = true
            keep-outputs = true
      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-
          # collect garbage until the Nix store size (in bytes) is at most this number
          gc-max-store-size-linux: 10G

      - run: (cd lib/rain.orderbook.interface/ && nix develop -c rainix-sol-prelude)
      - run: nix develop -c rainix-rs-prelude

      - run: cp -v .env.example .env
      - run: nix develop -c sqlx db create
      - run: nix develop -c sqlx migrate run

      - name: Run ${{ matrix.task }}
        run: nix develop -c ${{ matrix.task }}
