name: Build and deploy

on:
  push:
    branches: [master, "feat/cd"]  # TODO: remove once done testing
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}-deploy
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}

permissions:
  contents: read

env:
  DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
  ORDERBOOK: "0xf6fdcb30fd027c73cbacd54e22f02987e3116ebc"
  ORDER_OWNER: "0x73a41A704aB12aF7E4b0716D07ff3DfF7C350f41"
  DEPLOYMENT_BLOCK: 34844164
  REGISTRY_NAME: stox

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ env.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DO Container Registry
        run: doctl registry login --expiry-seconds 1200

      - name: Build Docker image
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV

          docker build \
            -t registry.digitalocean.com/${{ env.REGISTRY_NAME }}/schwarbot:$SHORT_SHA \
            -t registry.digitalocean.com/${{ env.REGISTRY_NAME }}/schwarbot:latest .

      - name: Push image to DO Registry
        run: |
          docker push registry.digitalocean.com/${{ env.REGISTRY_NAME }}/schwarbot:${{ env.SHORT_SHA }}
          docker push registry.digitalocean.com/${{ env.REGISTRY_NAME }}/schwarbot:latest

      - name: Deploy to Droplet
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: root
          key: ${{ secrets.DROPLET_SSH_KEY }}
          envs: DIGITALOCEAN_ACCESS_TOKEN,REGISTRY_NAME,SHORT_SHA,WS_RPC_URL,ORDERBOOK,ORDER_OWNER,DEPLOYMENT_BLOCK,APP_KEY,APP_SECRET
        env:
          WS_RPC_URL: ${{ secrets.WS_RPC_URL }}
          APP_KEY: ${{ secrets.APP_KEY }}
          APP_SECRET: ${{ secrets.APP_SECRET }}
          script: |
            set -euo pipefail

            # Create log directory and setup logging
            mkdir -p /var/log/schwarbot
            TIMESTAMP=$(date +%Y-%m-%d-%H%M%S)
            DEPLOY_LOG="/var/log/schwarbot/deploy-${TIMESTAMP}.log"
            DOCKER_LOG="/var/log/schwarbot/docker-${TIMESTAMP}.log"

            # Function to log and execute commands
            log_exec() {
              echo "$(date '+%Y-%m-%d %H:%M:%S') - $*" | tee -a "${DEPLOY_LOG}"
              "$@" 2>&1 | tee -a "${DEPLOY_LOG}"
              return ${PIPESTATUS[0]}
            }

            # Start deployment logging
            echo "$(date '+%Y-%m-%d %H:%M:%S') - Starting deployment of schwarbot:${SHORT_SHA}" | tee "${DEPLOY_LOG}"
            echo "Deployment logs: ${DEPLOY_LOG}" | tee -a "${DEPLOY_LOG}"
            echo "Container logs will be saved to: ${DOCKER_LOG}" | tee -a "${DEPLOY_LOG}"

            # Docker login
            echo "$(date '+%Y-%m-%d %H:%M:%S') - Logging into Docker registry" | tee -a "${DEPLOY_LOG}"
            echo "${DIGITALOCEAN_ACCESS_TOKEN}" | \
              docker login registry.digitalocean.com -u unused --password-stdin 2>&1 | tee -a "${DEPLOY_LOG}"

            # Pull image
            log_exec docker pull "registry.digitalocean.com/${REGISTRY_NAME}/schwarbot:${SHORT_SHA}"

            # Stop and remove existing container
            log_exec docker stop schwarbot || true
            log_exec docker rm schwarbot || true

            # Ensure database directory exists and has proper permissions
            log_exec chmod 755 /mnt/volume_nyc3_01

            # Start new container
            echo "$(date '+%Y-%m-%d %H:%M:%S') - Starting new container" | tee -a "${DEPLOY_LOG}"
            docker run -d \
              --name schwarbot \
              --restart unless-stopped \
              -v /mnt/volume_nyc3_01:/data \
              -e DATABASE_URL=sqlite:///data/schwab.db \
              -e WS_RPC_URL="${WS_RPC_URL}" \
              -e ORDERBOOK="${ORDERBOOK}" \
              -e ORDER_OWNER="${ORDER_OWNER}" \
              -e DEPLOYMENT_BLOCK="${DEPLOYMENT_BLOCK}" \
              -e APP_KEY="${APP_KEY}" \
              -e APP_SECRET="${APP_SECRET}" \
              "registry.digitalocean.com/${REGISTRY_NAME}/schwarbot:${SHORT_SHA}" 2>&1 | tee -a "${DEPLOY_LOG}"

            # Wait for container to start
            echo "$(date '+%Y-%m-%d %H:%M:%S') - Waiting for container to start..." | tee -a "${DEPLOY_LOG}"
            sleep 10

            # Check if container is running and capture logs
            if ! docker ps | grep -q schwarbot; then
              echo "$(date '+%Y-%m-%d %H:%M:%S') - Container failed to start" | tee -a "${DEPLOY_LOG}" >&2
              docker logs schwarbot 2>&1 | tee "${DOCKER_LOG}" | tee -a "${DEPLOY_LOG}"
              echo "Full container logs saved to: ${DOCKER_LOG}" | tee -a "${DEPLOY_LOG}" >&2
              exit 1
            fi

            # Capture initial container logs
            echo "$(date '+%Y-%m-%d %H:%M:%S') - Container started successfully, capturing logs..." | tee -a "${DEPLOY_LOG}"
            docker logs schwarbot 2>&1 | tee "${DOCKER_LOG}"

            # Check for errors in logs
            if docker logs schwarbot 2>&1 | grep -q "error\|panic\|failed"; then
              echo "$(date '+%Y-%m-%d %H:%M:%S') - Application errors detected in logs" | tee -a "${DEPLOY_LOG}" >&2
              docker logs --tail 20 schwarbot 2>&1 | tee -a "${DEPLOY_LOG}"
              echo "Full container logs saved to: ${DOCKER_LOG}" | tee -a "${DEPLOY_LOG}" >&2
              exit 1
            fi

            # Cleanup old images
            echo "$(date '+%Y-%m-%d %H:%M:%S') - Cleaning up old images..." | tee -a "${DEPLOY_LOG}"
            log_exec docker image prune -f
            docker images "registry.digitalocean.com/${REGISTRY_NAME}/schwarbot" \
              --format "table {{.Repository}}\t{{.Tag}}\t{{.CreatedAt}}" | \
              tail -n +2 | head -n -3 | awk '{print $1":"$2}' | \
              xargs -r docker rmi 2>&1 | tee -a "${DEPLOY_LOG}" || true

            # Cleanup old logs (keep last 10 deployments)
            echo "$(date '+%Y-%m-%d %H:%M:%S') - Cleaning up old deployment logs..." | tee -a "${DEPLOY_LOG}"
            cd /var/log/schwarbot
            ls -t deploy-*.log 2>/dev/null | tail -n +11 | xargs -r rm -f || true
            ls -t docker-*.log 2>/dev/null | tail -n +11 | xargs -r rm -f || true

            echo "$(date '+%Y-%m-%d %H:%M:%S') - Deployment completed successfully!" | tee -a "${DEPLOY_LOG}"
            echo "Deployment logs: ${DEPLOY_LOG}"
            echo "Container logs: ${DOCKER_LOG}"
